// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pingpong.proto

package protocol

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GRRequest struct {
	Req                  string   `protobuf:"bytes,1,opt,name=req,proto3" json:"req,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GRRequest) Reset()         { *m = GRRequest{} }
func (m *GRRequest) String() string { return proto.CompactTextString(m) }
func (*GRRequest) ProtoMessage()    {}
func (*GRRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1cfbf639ab46154b, []int{0}
}

func (m *GRRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GRRequest.Unmarshal(m, b)
}
func (m *GRRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GRRequest.Marshal(b, m, deterministic)
}
func (m *GRRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GRRequest.Merge(m, src)
}
func (m *GRRequest) XXX_Size() int {
	return xxx_messageInfo_GRRequest.Size(m)
}
func (m *GRRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GRRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GRRequest proto.InternalMessageInfo

func (m *GRRequest) GetReq() string {
	if m != nil {
		return m.Req
	}
	return ""
}

type GRResponse struct {
	Res                  string   `protobuf:"bytes,1,opt,name=res,proto3" json:"res,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GRResponse) Reset()         { *m = GRResponse{} }
func (m *GRResponse) String() string { return proto.CompactTextString(m) }
func (*GRResponse) ProtoMessage()    {}
func (*GRResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1cfbf639ab46154b, []int{1}
}

func (m *GRResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GRResponse.Unmarshal(m, b)
}
func (m *GRResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GRResponse.Marshal(b, m, deterministic)
}
func (m *GRResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GRResponse.Merge(m, src)
}
func (m *GRResponse) XXX_Size() int {
	return xxx_messageInfo_GRResponse.Size(m)
}
func (m *GRResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GRResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GRResponse proto.InternalMessageInfo

func (m *GRResponse) GetRes() string {
	if m != nil {
		return m.Res
	}
	return ""
}

func init() {
	proto.RegisterType((*GRRequest)(nil), "api.GRRequest")
	proto.RegisterType((*GRResponse)(nil), "api.GRResponse")
}

func init() { proto.RegisterFile("pingpong.proto", fileDescriptor_1cfbf639ab46154b) }

var fileDescriptor_1cfbf639ab46154b = []byte{
	// 130 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2b, 0xc8, 0xcc, 0x4b,
	0x2f, 0xc8, 0xcf, 0x4b, 0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4e, 0x2c, 0xc8, 0x54,
	0x92, 0xe5, 0xe2, 0x74, 0x0f, 0x0a, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x11, 0x12, 0xe0, 0x62,
	0x2e, 0x4a, 0x2d, 0x94, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x02, 0x31, 0x95, 0xe4, 0xb8, 0xb8,
	0x40, 0xd2, 0xc5, 0x05, 0xf9, 0x79, 0xc5, 0xa9, 0x10, 0xf9, 0x62, 0x84, 0x7c, 0xb1, 0x91, 0x03,
	0x17, 0xb7, 0x7b, 0x6a, 0x09, 0x5c, 0x81, 0x21, 0x17, 0x8f, 0x7b, 0x66, 0x59, 0x2a, 0x9c, 0xcf,
	0xa7, 0x97, 0x58, 0x90, 0xa9, 0x07, 0xb7, 0x40, 0x8a, 0x1f, 0xce, 0x87, 0x28, 0x50, 0x62, 0x48,
	0x62, 0x03, 0x3b, 0xc6, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x59, 0x0b, 0x69, 0xb0, 0x9e, 0x00,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// GetResponseClient is the client API for GetResponse service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GetResponseClient interface {
	GiveResponse(ctx context.Context, in *GRRequest, opts ...grpc.CallOption) (*GRResponse, error)
}

type getResponseClient struct {
	cc grpc.ClientConnInterface
}

func NewGetResponseClient(cc grpc.ClientConnInterface) GetResponseClient {
	return &getResponseClient{cc}
}

func (c *getResponseClient) GiveResponse(ctx context.Context, in *GRRequest, opts ...grpc.CallOption) (*GRResponse, error) {
	out := new(GRResponse)
	err := c.cc.Invoke(ctx, "/api.GetResponse/GiveResponse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GetResponseServer is the server API for GetResponse service.
type GetResponseServer interface {
	GiveResponse(context.Context, *GRRequest) (*GRResponse, error)
}

// UnimplementedGetResponseServer can be embedded to have forward compatible implementations.
type UnimplementedGetResponseServer struct {
}

func (*UnimplementedGetResponseServer) GiveResponse(ctx context.Context, req *GRRequest) (*GRResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GiveResponse not implemented")
}

func RegisterGetResponseServer(s *grpc.Server, srv GetResponseServer) {
	s.RegisterService(&_GetResponse_serviceDesc, srv)
}

func _GetResponse_GiveResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GRRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GetResponseServer).GiveResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.GetResponse/GiveResponse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GetResponseServer).GiveResponse(ctx, req.(*GRRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GetResponse_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.GetResponse",
	HandlerType: (*GetResponseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GiveResponse",
			Handler:    _GetResponse_GiveResponse_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pingpong.proto",
}
